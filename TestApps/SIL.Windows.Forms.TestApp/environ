# Environment settings for running programs with the SIL version of mono
# Set MONO_ENVIRON to this file's pathname, then run, for example,
#    /opt/mono-sil/bin/mono --debug PalasoUIWindowsForms.TestApp.exe
# These setting assume that the packaged SIL Mono is installed in /opt/mono-sil.

# the sourcing script should cd/pushd to the directory containing this script
BASE="$(pwd)"
[ -z "$BUILD" ] && BUILD=Debug
[ -z "$MONO_PREFIX" ] && MONO_PREFIX=/opt/mono5-sil

# MonoDevelop seems to set PKG_CONFIG_LIBDIR to the empty string, which is bad
# for us because that eliminates most packages, including geckofx29.
# If PKG_CONFIG_LIBDIR is not set at all, then the default paths are searched.
# To be safe, we'll preserve the old value (if it is set) and restore it.
if [ "${PKG_CONFIG_LIBDIR+set}" = set ]; then
	OLD_PKG_CONFIG_LIBDIR="${PKG_CONFIG_LIBDIR}"
	unset PKG_CONFIG_LIBDIR
fi

# Simplified setup - assuming the nuget packages got installed in ~/.nuget/packages
if [ "$(uname -m)" == "x86_64" ]; then
	ARCH=64
else
	ARCH=32
fi
XULRUNNER=$HOME/.nuget/packages/geckofx45.$ARCH.linux/45.0.37/content/Firefox-Linux${ARCH}

LD_LIBRARY_PATH="${XULRUNNER}:${LD_LIBRARY_PATH}"
export LD_PRELOAD=${XULRUNNER}/libgeckofix.so
export XULRUNNER

if [ "${OLD_PKG_CONFIG_LIBDIR+set}" = set ]; then
	export PKG_CONFIG_LIBDIR="${OLD_PKG_CONFIG_LIBDIR}"
	unset OLD_PKG_CONFIG_LIBDIR
fi

GDK_SHARP=/usr/lib/cli/gdk-sharp-2.0

MONO_RUNTIME=v4.0.30319
MONO_PATH="${GDK_SHARP}:${GECKOFX}"

################################################################################################

# Add the build output to paths
PATH="${BASE}/output/${BUILD}:${PATH}"
LD_LIBRARY_PATH="${BASE}/output/${BUILD}:${LD_LIBRARY_PATH}"
MONO_PATH="${BASE}/output/${BUILD}:${MONO_PATH}"

################################################################################################

# Add locally-built mono items to paths
# We also add the default values for PKG_CONFIG_PATH - MonoDevelop resets the PKG_CONFIG_PATH
# environment variable if we're running under a different Mono runtime so that some
# packages that got installed in standard locations can't be found otherwise.
PATH="${MONO_PREFIX}/bin:${PATH}"
LD_LIBRARY_PATH="${MONO_PREFIX}/lib:${LD_LIBRARY_PATH}"
PKG_CONFIG_PATH="${MONO_PREFIX}/lib/pkgconfig:${PKG_CONFIG_PATH}:/usr/local/lib/pkgconfig:/lib/pkgconfig:/usr/lib/pkgconfig"
MONO_GAC_PREFIX="${MONO_PREFIX}:/usr"

################################################################################################

MONO_TRACE_LISTENER="Console.Out"
#MONO_IOMAP=case
MONO_MWF_SCALING=disable
# if debugging for performance unset DEBUG_ENABLE_PTR_VALIDATION env var.
#export DEBUG_ENABLE_PTR_VALIDATION=1

export \
	PATH LD_LIBRARY_PATH PKG_CONFIG_PATH LD_PRELOAD \
	MONO_PATH \
	MONO_RUNTIME MONO_PREFIX MONO_GAC_PREFIX \
	MONO_TRACE_LISTENER MONO_IOMAP MONO_MWF_SCALING

# prevent Gecko from printing scary message about "double free or corruption" on shutdown
# (See FWNX-1216.)  Tom Hindle suggested this hack as a stopgap.
export MALLOC_CHECK_=0

#sets keyboard input method to none
unset XMODIFIERS
