using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using SIL.Lift.Parsing;
using Tenuto.Reader;
using Tenuto.Verifier;

namespace SIL.Lift.Validation
{
	///<summary>
	/// This class provides validation (via built-in RNG schema) of a LIFT file.
	///</summary>
	public class Validator
	{
		///<summary>
		/// Parse the given LIFT file and return a string containing any validation errors.
		///</summary>
		private static string GetAnyValidationErrors(string path)
		{
			string errors = "";
			errors += GetSchemaValidationErrors(path);
			errors += GetDuplicateGuidErrors(path);
			return errors;
		}

		private static string GetDuplicateGuidErrors(string path)
		{
			string errors="";
			HashSet<string> guids = new HashSet<string>();

			using (XmlTextReader reader = new XmlTextReader(path))
			{
				try
				{
					while (reader.Read())
					{
						if (reader.HasAttributes)
						{
							var guid = reader.GetAttribute("guid");
							if (!string.IsNullOrEmpty(guid))
							{
								if (guids.Contains(guid))
								{
									errors += Environment.NewLine + "Found duplicate GUID (Globally Unique Identifier): " + guid+". All GUIDs must be unique.";
								}
								else
								{
									guids.Add(guid);
								}
							}
						}
					}
				}
				catch (Exception error)
				{
					errors += error.Message;
				}
			}
			return errors;
		}


		///<summary>
		/// Validate the LIFT file contained in the XmlTextReader.
		///</summary>
		private static string GetSchemaValidationErrors(string path)
		{
			using (var documentReader = new XmlTextReader(path))
			{
				const string fileName = "SIL.Lift.Validation.lift.rng";
				var grammarStream = typeof (LiftMultiText).Assembly.GetManifestResourceStream(fileName);
				if (grammarStream == null)
					throw new Exception($"Could not get {fileName} as stream.");
				var grammarReader = new GrammarReader(new ConsoleController());
				var grammar = grammarReader.parse(XmlReader.Create(grammarStream, null, "about:blank"));
				if (grammar == null)
					throw new Exception($"{fileName} parsing failed.");

				var errors = new ErrorContainer();
				var isValid = Verifier.Verify(documentReader, grammar, errors);
				return isValid ? null : errors.GetErrors().First();
			}
		}

		///<summary>
		/// Get the LIFT version handled by this code in the form of a string.
		///</summary>
		public static string LiftVersion
		{
			get
			{
				return "0.13";
			}
		}

		///<summary>
		/// Check the given LIFT file for validity, throwing an exception if an error is found.
		///</summary>
		///<exception cref="LiftFormatException"></exception>
		public static void CheckLiftWithPossibleThrow(string pathToLiftFile)
		{
			string errors = GetAnyValidationErrors(pathToLiftFile);
			if (!String.IsNullOrEmpty(errors))
			{
				errors = string.Format("Sorry, the dictionary file at {0} does not conform to the current version of the LIFT format ({1}).  The RNG validator said: {2}.\r\n\r\n If this file was generated by a program such as Lexique Pro, FieldWorks, or WeSay it's very important that you notify the relevant developers of the problem.",
									   pathToLiftFile, LiftVersion, errors);
				throw new LiftFormatException(errors);
			}
		}

		///<summary>
		/// Get the LIFT version of the given file, throwing an exception if it cannot be found.
		///</summary>
		///<exception cref="LiftFormatException"></exception>
		public static string GetLiftVersion(string pathToLift)
		{
			string liftVersionOfRequestedFile = String.Empty;

			XmlReaderSettings readerSettings = new XmlReaderSettings();
			readerSettings.ValidationType = ValidationType.None;
			readerSettings.IgnoreComments = true;

			using (XmlReader reader = XmlReader.Create(pathToLift, readerSettings))
			{
				if (reader.IsStartElement("lift"))
					liftVersionOfRequestedFile = reader.GetAttribute("version");
			}
			if (String.IsNullOrEmpty(liftVersionOfRequestedFile))
			{
				throw new LiftFormatException(String.Format("Cannot import {0} because this was not recognized as well-formed LIFT file (missing version).", pathToLift));
			}
			return liftVersionOfRequestedFile;
		}
	}
}