Documentation for CrossPlatformSettingsProvider
===============================================
The CrossPlatformSettings provider lets us avoid current (2013) inconsistancies in the mono and
windows implementations of the settings class. Currently the mono implementation is insufficient
for our needs.

Short instructions (to just make it work)
-----------------------------------------
To use the CrossPlatformSettings provider add the following content to a new class in the project
for your assembly where settings are defined. All of your current settings should be modified in
the designer to include "SIL.Settings.CrossPlatformSettingsProvider" in the Provider property.
Place the file next to the Settings.Designer.cs file and replacing the place-holders [{}] with
appropriate info:

using System.Configuration;
using System.Diagnostics;
using SIL.Settings;

namespace [{Namespace to match your Settings.Designer.cs file}].Properties
{
	/// <summary>
	/// Settings class to put a custom provider in.
	/// </summary>
	public sealed partial class Settings
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="[{Fill in correctly or blow this comment away}].Settings"/>
		/// class setting the provider collection to contain a CrossPlatformSettingsProvider and
		/// making every property use that.
		/// </summary>
		public Settings ()
		{
			foreach (SettingsProperty property in Properties)
			{
				Debug.Assert(property.Provider is CrossPlatformSettingsProvider,
					"SIL.Settings.CrossPlatformSettingsProvider should be used for " + property.Name);
			}
		}
	}
}

Full Information (why and how it works)
---------------------------------------
The .Net framework allows for the addition of custom SettingsProviders to let programmers retrieve
and save program settings in novel ways. The default implementation is the LocalFileSettingsProvider
class. This saves the file on windows in the following location:
[Primary Drive]\Users\[UserName]\AppData\Local\[CompanyName]\[ApplicationNamePlusEvidenceHash]\[Version]\user.config
i.e. C:\Users\naylor\AppData\Local\SIL\Fieldworks.exe_Url_af84fab49dsacd3f4\8.0.5.6432\user.config
the mono implementation stores files as follows:
/home/[User]/.local/share/[CompanyName]/[ApplicationNamePlusEvidenceHash]/user.config
i.e. /home/jnaylor/.local/share/SIL/Fieldworks.exe_Url_fe24fab49ddare3f4/user.config
As the mono version drops the version folder it cannot do updates from old to new settings, since
Upgrade wasn't implemented on mono this is at least consistent and means settings shouldn't be
lost. The hash appended to the executable name is different on the two platforms.
The mono implementation did not save complex settings (XML serialized) reliably. The windows
implementation also has bugs:
(http://connect.microsoft.com/VisualStudio/feedback/details/801786/two-saves-of-properties-settings-default-in-rapid-succession-fails-to-write-out-to-file-changes-in-custom-object-properties)
The considerable gaps and bugs where the gaps weren't, inspired the creation of the
CrossPlatformSettingsProvider.

The CrossPlatformSettingsProvider emulates most of the default behavior of the
LocalFileSettingsProvider.
The following are the known differences:
1. The folder name does not contain the evidence hash:
	Windows Example: C:\Users\naylor\AppData\Local\SIL\Fieldworks\8.0.5.6432\user.config
	Linux Example:   /home/jnaylor/.local/share/SIL/Fieldworks/8.0.5.6432/user.config
2. I've dropped a couple of attributes off of the section element (allowExeDefinition,
	requirePermission) in the xml. I didn't know how to programatically determine them.
3. The custom settings provider gives us an upgrade path on Mono, but this hasn't been thoroughly
	exercised (no need yet). The default settings Upgrade behaviour provided by the
	CrossPlatformSettingsProvider class just copies the xml from the most recent previous version
	into the new location.
4. Only settings serialized as String or XML are supported.

When you supply SIL.Settings.CrossPlatformSettingsProvider to the designer the .Net framework
will construct our class at runtime and use it for all the restoring and saving of those settings.