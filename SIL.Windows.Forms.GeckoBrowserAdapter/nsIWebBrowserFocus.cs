// copied (and edited) from the GeckoFx-29 source code.
// --------------------------------------------------------------------------------------------
// Version: MPL 1.1/GPL 2.0/LGPL 2.1
//
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
//
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
//
// <remarks>
// Generated by IDLImporter from file nsIWebBrowserFocus.idl
//
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace SIL.Windows.Forms.GeckoBrowserAdapter	// was Gecko
{
	/// <summary>
	/// nsIWebBrowserFocus
	/// Interface that embedders use for controlling and interacting
	/// with the browser focus management. The embedded browser can be focused by
	/// clicking in it or tabbing into it. If the browser is currently focused and
	/// the embedding application's top level window is disabled, deactivate() must
	/// be called, and activate() called again when the top level window is
	/// reactivated for the browser's focus memory to work correctly.
	/// </summary>
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("9c5d3c58-1dd1-11b2-a1c9-f3699284657a")]
	public interface nsIWebBrowserFocus
	{
		/// <summary>
		/// MANDATORY
		/// activate() is a mandatory call that must be made to the browser
		/// when the embedding application's window is activated *and* the
		/// browser area was the last thing in focus.  This method can also be called
		/// if the embedding application wishes to give the browser area focus,
		/// without affecting the currently focused element within the browser.
		///
		/// @note
		/// If you fail to make this call, mozilla focus memory will not work
		/// correctly.
		/// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Activate();

		/// <summary>
		/// MANDATORY
		/// deactivate() is a mandatory call that must be made to the browser
		/// when the embedding application's window is deactivated *and* the
		/// browser area was the last thing in focus.  On non-windows platforms,
		/// deactivate() should also be called when focus moves from the browser
		/// to the embedding chrome.
		///
		/// @note
		/// If you fail to make this call, mozilla focus memory will not work
		/// correctly.
		/// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void Deactivate();

		/// <summary>
		/// Give the first element focus within mozilla
		/// (i.e. TAB was pressed and focus should enter mozilla)
		/// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetFocusAtFirstElement();

		/// <summary>
		/// Give the last element focus within mozilla
		/// (i.e. SHIFT-TAB was pressed and focus should enter mozilla)
		/// </summary>
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		void SetFocusAtLastElement();

		// The remaining methods are not needed in the Palaso code, and reference other
		// ns interfaces that we don't otherwise need.
	}
}
